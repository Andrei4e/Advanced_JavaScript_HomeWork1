// Задание 1
// • Используя Symbol.iterator, создайте объект "Музыкальная коллекция", который можно итерировать. Каждая итерация должна возвращать следующий альбом из коллекции.

// • Создайте объект musicCollection, который содержит массив альбомов и имеет свойство-символ Symbol.iterator. Каждый альбом имеет следующую структуру:

// {
// title: "Название альбома",
// artist: "Исполнитель",
// year: "Год выпуска"
// }

// • Реализуйте кастомный итератор для объекта musicCollection. Итератор должен перебирать альбомы по порядку.
// • Используйте цикл for...of для перебора альбомов в музыкальной коллекции и вывода их на консоль в формате: Название альбома - Исполнитель (Год выпуска)

// const albums1 = [
//     {
//         title: "Альбом1",
//         artist: "Исполнитель1",
//         year: "1980"
//     },
//     {
//         title: "Альбом2",
//         artist: "Исполнитель2",
//         year: "1990"
//     },
//     {
//         title: "Альбом3",
//         artist: "Исполнитель3",
//         year: "2000"
//     }
// ];

// const musicCollection = {
//     albums: [...albums1],
//     [Symbol.iterator]: function () {
//         let countAlbums = 0;
//         return {
//             next: ( () => {
//                 if (countAlbums >= this.albums.length) {
//                     return {done: true}
//                 } else {
//                     return {value: this.albums[countAlbums++], done: false}
//                 }
//             })
//         }
//     }
// };

// for (const album of musicCollection) {
//     console.log(`${album.title} - ${album.artist} (${album.year})`);
// }


// Задание 2
// Вы управляете рестораном, в котором работают разные повара, специализирующиеся на определенных блюдах. Клиенты приходят и делают заказы на разные блюда.

// Необходимо создать систему управления этими заказами, которая позволит:

// • Отслеживать, какой повар готовит какое блюдо.
// • Записывать, какие блюда заказал каждый клиент.

// Используйте коллекции Map для хранения блюд и их поваров, а также для хранения заказов каждого клиента. В качестве ключей для клиентов используйте объекты.

// Повара и их специализации:

// Виктор - специализация: Пицца.
// Ольга - специализация: Суши.
// Дмитрий - специализация: Десерты.

// Блюда и их повара:

// Пицца "Маргарита" - повар: Виктор.
// Пицца "Пепперони" - повар: Виктор.
// Суши "Филадельфия" - повар: Ольга.
// Суши "Калифорния" - повар: Ольга.
// Тирамису - повар: Дмитрий.
// Чизкейк - повар: Дмитрий.

// Заказы:

// Клиент Алексей заказал: Пиццу "Пепперони" и Тирамису.
// Клиент Мария заказала: Суши "Калифорния" и Пиццу "Маргарита".
// Клиент Ирина заказала: Чизкейк.

let dishes = new Map();
dishes.set('Пицца "Маргарита"', 'Виктор')
    .set('Пицца "Пепперони"', 'Виктор')
    .set('Суши "Филадельфия"', 'Ольга')
    .set('Суши "Калифорния"', 'Ольга')
    .set('Тирамису', 'Дмитрий')
    .set('Чизкейк', 'Дмитрий');

const clientAlexey = {
    name: 'Алексей'
};

const clientMary = {
    name: 'Мария'
};

const clientIrina = {
    name: 'Ирина'
};

let ordersAlexey = new Set();
ordersAlexey.add('Пицца "Пепперони"')
    .add('Тирамису');

let ordersMary = new Set();
ordersMary.add('Суши "Калифорния"')
    .add('Пицца "Маргарита"');

let ordersIrina = new Set();
ordersIrina.add('Чизкейк');

let orders = new Map()
orders.set(clientAlexey, ordersAlexey);
orders.set(clientMary, ordersMary);
orders.set(clientIrina, ordersIrina);

console.log("dishes", dishes);
console.log("orders", orders);